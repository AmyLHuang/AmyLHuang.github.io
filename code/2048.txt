import random, copy

def populate_cell():
    '''
    Puts number 2 or number 4 in an empty cell, if an empty cell exists
    '''
    empty_cells = [(i, j) for i, row in enumerate(board) for j, cell in enumerate(row) if cell == 0]
    if (len(empty_cells) != 0):
        row, col = random.choice(empty_cells)
        board[row][col] = random.choice([2, 4])

def print_board(score):
    '''
    Prints out the board in a 4x4 table
    '''
    print(f"score: {score}")
    longest_num = max(max(row, default=0) for row in board)
    cell_width = len(str(longest_num)) + 1
    num_dashes = (cell_width+1) * 4 +3

    print("+" + "-"*num_dashes + "+")
    for row in board:
        print("|", end="")
        for col in row:
            print(f" {' ' if col == 0 else col:^{cell_width}}|", end="")
        print("\n+" + "-"*num_dashes + "+")

def game_won():
    '''
    Check if Game is won based on whether 2048 is on the board
    '''
    for row in board:
        for col in row:
            if col == 2048:
                return True
    return False

def game_over(score):
    '''
    Checks if Game is game over based on whether any more moves can be made
    '''
    global board
    flag = True
    og_board = copy.deepcopy(board)
    for i in range(4):
        original_board = copy.deepcopy(board)
        move(score)
        if (original_board != board):
            flag = False
            break
        rotate_board()
    board = og_board
    return flag

def rotate_board(reverse = False):
    '''
    Rotates the board. If reverse is False, then the board is rotated clockwise. If reverse is True, then the board is rotated counter-clockwise
    '''
    global board
    if (not reverse):
        board = [list(row) for row in zip(*board[::-1])] 
    else:
        board = [list(row) for row in zip(*board)][::-1]

def move(score):
    '''
    Moves left. Returns True if board was changed. Returns False if board was not changed.
    '''
    moved = False
    for i, row in enumerate(board):
        prev_changed = None
        for j, col in enumerate(row[1:], start=1):
            if col == 0:
                continue
            temp_j = j
            while temp_j > 0 and board[i][temp_j-1] == 0:
                board[i][temp_j-1] = board[i][temp_j]
                board[i][temp_j] = 0
                temp_j -= 1
                moved = True
            if (temp_j > 0) and (board[i][temp_j-1] == board[i][temp_j]) and (prev_changed != temp_j-1):
                new_val = board[i][temp_j-1] * 2
                score = max(score, new_val)
                board[i][temp_j-1] = new_val
                board[i][temp_j] = 0
                prev_changed = temp_j-1
                moved = True
    return moved, score

def game_ended(isMoved, score):
    '''
    Checks if the game is ended or not after each move. If ended, returns True. Else, return False.
    '''
    if (isMoved):
        populate_cell()
        print_board(score)
    if (game_won()):
        print(f"Congrats!, you won the game! Final Score: {score}")
        return True
    if (game_over(score)):
        print(f"Game Over! Final Score: {score}")
        return True
    if (not isMoved):
        print_board(score)
    return False

def play_game():
    '''
    A Game is played until user quits, game is won, or game over
    '''
    score = 0
    populate_cell()
    populate_cell()
    print_board(score)

    while True:
        user_input = input().lower()
        if (user_input in ['q', 'exit', 'quit']):
            break
        
        if (user_input == 'a'):
            isMoved, score = move(score)
        elif (user_input == 'w'):
            rotate_board(reverse=True)
            isMoved, score = move(score)
            rotate_board()
        elif (user_input == 's'):
            rotate_board()
            isMoved, score = move(score)
            rotate_board(reverse=True)
        elif (user_input == 'd'):
            rotate_board()
            rotate_board()
            isMoved, score = move(score)
            rotate_board()
            rotate_board()
        else:
            print("Invalid Input (Valid Inputs: w, a, s, d, q)")
            continue

        if (game_ended(isMoved, score)):
            break

def main():
    '''
    Prints the rules and start a game
    '''
    print("Rules: ")
    print("  1) press w, a, s, d keys to move")
    print("  2) combine pieces with same value")
    print("  3) get to 2048")
    print("  4) press q to quit game")
    input("Press Enter to start game: ")
    print("--------------------------------------")
    print("Game Starting...\n")
    play_game()


if __name__ == "__main__":
    board = [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0]]
    main()